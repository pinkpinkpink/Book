String 

ADT String{
    数据对象：
    数据关系：
    基本操作：
}ADT String
串值用单引号括起来 Tsing = 'TSING'

空格串''' 空串 

串的堆分配**存储** 动态分配函数 
malloc() free()

串的模式匹配算法

原子：不可分解

算法控制结构：分支、循环、顺序

- 时间复杂度

基本操作执行次数是问题规模n的某个函数f(n),算法的时间量度T(n) = O(f(n)),随着问题规模n增大，算法执行时间的增长率和f(n)的增长率相同。

- 空间复杂度

算法所需存储空间得量度S(n)= O(f(n)),n为问题的大小。


- 线性表

链式存储结构

线性链表

## 第五章 数组和广义表

- 数组
 ADT Array{
     数据对象：j= ....;i= ....;

     数据关系：
        
        R = {R1,R2,R3.......Rn};

     基本操作：

        InitArray{};

        DestroyArray{};

        Value{};

        Assign{};

        //数组只有存取元素和修改元素值的操作

 }ADT Array;

- 广义表的存储结构 Page109

- 树和二叉树 Page118

ADT Tree{
    数据对象：
    数据关系：
    基本操作：
    InitTree(&T);
    DestroyTree(&T);
    CreateTree(&T);
    ClearTree(&T);
    RootTree(&T);
    ValueTree(&T);
    Parent(T,cur_e);
    InsertChild(&T,&p,i,c);
    DeleteChild(&T,&p,i);

}ADT Tree

树的定义是递归的定义

二叉树 
ADT BinaryTree{
    InitBiTree(&T);
    DestroyBiTree(&T);
    CreateBiTree(&T);
    ClearBiTree(&T);
    Root(T);
    Value(T,e);
    Assign(T,&value,e);
    //结点e赋值为value
    Parent(T,e);
    LeftChild(T,e);
    RightChild(T,e);
    InsertChid(T,p，LR，c);
    //p指向某个指定结点，LR为0或1
    DeleteChild(T,p,p，LR);
}ADT BinaryTree

二叉树的性质

最优二叉树

图

深度优先搜索

广度优先搜索

最小生成树

平衡二叉树(balancend Binary Tree)

B-树和B+树

好难啊 ！！！
Page224


Node.js SQLLite add delete update query

B-树查找分析
（1）B-树中找结点
（2）在结点中找关键字
B-树的插入和删除

B+树
n棵子树的结点含有n个关键字
所有叶子结点包含全部关键字信息
所有非终端结点可以看成是索引部分

建树 数字查找数
树的孩子兄弟链表表示键树，分支结点包含三个域：symbol、first、next；

哈希表
记录的存储位置和它的关键字有确定的对应关系，使每个关键字和结构中的唯一存储位置相对应。

哈希函数的构造方法



